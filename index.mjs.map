{"version":3,"file":"index.mjs","sources":["../lib/getter.js","../lib/getter.accessor.js","../lib/setter.js","../lib/setter.accessor.js","../lib/main.js","../lib/accessors.js","../lib/map.js","../lib/ndarray.js","../lib/accessors.ndarray.js","../lib/map.ndarray.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a strided array element.\n*\n* @private\n* @param {Collection} x - strided array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element\n*/\nfunction getter( x, idx ) {\n\treturn x[ idx ];\n}\n\n\n// EXPORTS //\n\nexport default getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a strided array element using an accessor method.\n*\n* @private\n* @param {Collection} x - strided array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element\n*/\nfunction getter( x, idx ) {\n\treturn x.get( idx );\n}\n\n\n// EXPORTS //\n\nexport default getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets a strided array element.\n*\n* @private\n* @param {Collection} x - strided array\n* @param {NonNegativeInteger} idx - element index\n* @param {*} value - value to set\n*/\nfunction setter( x, idx, value ) {\n\tx[ idx ] = value;\n}\n\n\n// EXPORTS //\n\nexport default setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets a strided array element using an accessor method.\n*\n* @private\n* @param {Collection} x - strided array\n* @param {NonNegativeInteger} idx - element index\n* @param {*} value - value to set\n*/\nfunction setter( x, idx, value ) {\n\tx.set( value, idx );\n}\n\n\n// EXPORTS //\n\nexport default setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strided from './map.js';\nimport accessors from './accessors.js';\nimport getIndexed from './getter.js';\nimport getAccessor from './getter.accessor.js';\nimport setIndexed from './setter.js';\nimport setAccessor from './setter.accessor.js';\n\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* import add from '@stdlib/math-base-ops-add';\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, y, 1, z, 1, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, y, strideY, z, strideZ, fcn, clbk, thisArg ) {\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\n\t// Note: we intentionally use weak checks for accessors and do not explicitly check for functions for (perhaps marginally) better performance...\n\tif ( x.get && x.set ) {\n\t\txget = getAccessor;\n\t}\n\tif ( y.get && y.set ) {\n\t\tyget = getAccessor;\n\t}\n\tif ( z.get && z.set ) {\n\t\tzset = setAccessor;\n\t}\n\tif ( xget || yget || zset ) {\n\t\txget = xget || getIndexed;\n\t\tyget = yget || getIndexed;\n\t\tzset = zset || setIndexed;\n\t\treturn accessors( N, x, strideX, xget, y, strideY, yget, z, strideZ, zset, fcn, clbk, thisArg ); // eslint-disable-line max-len\n\t}\n\treturn strided( N, x, strideX, y, strideY, z, strideZ, fcn, clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default mapBy2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {Function} xget - accessor for retrieving elements in `x`\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {Function} yget - accessor for retrieving elements in `y`\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {Function} zset - accessor for setting elements in `z`\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* import add from '@stdlib/math-base-ops-add';\n*\n* function accessor( values ) {\n*     return values;\n* }\n*\n* function get( buf, idx ) {\n*     return buf[ idx ] * 2.0;\n* }\n*\n* function set( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, get, y, 1, get, z, 1, set, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, xget, y, strideY, yget, z, strideZ, zset, fcn, clbk, thisArg ) { // eslint-disable-line max-len, max-params\n\tvar args;\n\tvar o;\n\tvar a;\n\tvar v;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\to = [ 0, 0, 0 ];\n\tif ( strideX < 0 ) {\n\t\to[ 0 ] = (1-N) * strideX;\n\t} else {\n\t\to[ 0 ] = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\to[ 1 ] = (1-N) * strideY;\n\t} else {\n\t\to[ 1 ] = 0;\n\t}\n\tif ( strideZ < 0 ) {\n\t\to[ 2 ] = (1-N) * strideZ;\n\t} else {\n\t\to[ 2 ] = 0;\n\t}\n\ta = [ x, y, z ];\n\targs = [ 0, 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\targs[ 0 ] = xget( x, o[ 0 ] );\n\t\targs[ 1 ] = yget( y, o[ 1 ] );\n\t\tv = clbk.call( thisArg, args, i, o, a );\n\t\tif ( v !== void 0 ) {\n\t\t\tzset( z, o[ 2 ], fcn( v[ 0 ], v[ 1 ] ) );\n\t\t}\n\t\to[ 0 ] += strideX;\n\t\to[ 1 ] += strideY;\n\t\to[ 2 ] += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default mapBy2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* import add from '@stdlib/math-base-ops-add';\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, y, 1, z, 1, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, y, strideY, z, strideZ, fcn, clbk, thisArg ) {\n\tvar args;\n\tvar o;\n\tvar a;\n\tvar v;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\to = [ 0, 0, 0 ];\n\tif ( strideX < 0 ) {\n\t\to[ 0 ] = (1-N) * strideX;\n\t} else {\n\t\to[ 0 ] = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\to[ 1 ] = (1-N) * strideY;\n\t} else {\n\t\to[ 1 ] = 0;\n\t}\n\tif ( strideZ < 0 ) {\n\t\to[ 2 ] = (1-N) * strideZ;\n\t} else {\n\t\to[ 2 ] = 0;\n\t}\n\ta = [ x, y, z ];\n\targs = [ 0, 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\targs[ 0 ] = x[ o[0] ];\n\t\targs[ 1 ] = y[ o[1] ];\n\t\tv = clbk.call( thisArg, args, i, o, a );\n\t\tif ( v !== void 0 ) {\n\t\t\tz[ o[2] ] = fcn( v[ 0 ], v[ 1 ] );\n\t\t}\n\t\to[ 0 ] += strideX;\n\t\to[ 1 ] += strideY;\n\t\to[ 2 ] += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default mapBy2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strided from './map.ndarray.js';\nimport accessors from './accessors.ndarray.js';\nimport getIndexed from './getter.js';\nimport getAccessor from './getter.accessor.js';\nimport setIndexed from './setter.js';\nimport setAccessor from './setter.accessor.js';\n\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* import add from '@stdlib/math-base-ops-add';\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, 0, y, 1, 0, z, 1, 0, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, offsetX, y, strideY, offsetY, z, strideZ, offsetZ, fcn, clbk, thisArg ) { // eslint-disable-line max-len, max-params\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\n\t// Note: we intentionally use weak checks for accessors and do not explicitly check for functions for (perhaps marginally) better performance...\n\tif ( x.get && x.set ) {\n\t\txget = getAccessor;\n\t}\n\tif ( y.get && y.set ) {\n\t\tyget = getAccessor;\n\t}\n\tif ( z.get && z.set ) {\n\t\tzset = setAccessor;\n\t}\n\tif ( xget || yget || zset ) {\n\t\txget = xget || getIndexed;\n\t\tyget = yget || getIndexed;\n\t\tzset = zset || setIndexed;\n\t\treturn accessors( N, x, strideX, offsetX, xget, y, strideY, offsetY, yget, z, strideZ, offsetZ, zset, fcn, clbk, thisArg ); // eslint-disable-line max-len\n\t}\n\treturn strided( N, x, strideX, offsetX, y, strideY, offsetY, z, strideZ, offsetZ, fcn, clbk, thisArg ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default mapBy2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Function} xget - accessor for retrieving elements in `x`\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Function} yget - accessor for retrieving elements in `y`\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} zset - accessor for setting elements in `z`\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* import add from '@stdlib/math-base-ops-add';\n*\n* function accessor( values ) {\n*     return values;\n* }\n*\n* function get( buf, idx ) {\n*     return buf[ idx ] * 2.0;\n* }\n*\n* function set( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, 0, get, y, 1, 0, get, z, 1, 0, set, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, offsetX, xget, y, strideY, offsetY, yget, z, strideZ, offsetZ, zset, fcn, clbk, thisArg ) { // eslint-disable-line max-len, max-params\n\tvar args;\n\tvar o;\n\tvar a;\n\tvar v;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\to = [ offsetX, offsetY, offsetZ ];\n\ta = [ x, y, z ];\n\targs = [ 0, 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\targs[ 0 ] = xget( x, o[ 0 ] );\n\t\targs[ 1 ] = yget( y, o[ 1 ] );\n\t\tv = clbk.call( thisArg, args, i, o, a );\n\t\tif ( v !== void 0 ) {\n\t\t\tzset( z, o[ 2 ], fcn( v[ 0 ], v[ 1 ] ) );\n\t\t}\n\t\to[ 0 ] += strideX;\n\t\to[ 1 ] += strideY;\n\t\to[ 2 ] += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default mapBy2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* import add from '@stdlib/math-base-ops-add';\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, 0, y, 1, 0, z, 1, 0, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, offsetX, y, strideY, offsetY, z, strideZ, offsetZ, fcn, clbk, thisArg ) { // eslint-disable-line max-len, max-params\n\tvar args;\n\tvar o;\n\tvar a;\n\tvar v;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\to = [ offsetX, offsetY, offsetZ ];\n\ta = [ x, y, z ];\n\targs = [ 0, 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\targs[ 0 ] = x[ o[0] ];\n\t\targs[ 1 ] = y[ o[1] ];\n\t\tv = clbk.call( thisArg, args, i, o, a );\n\t\tif ( v !== void 0 ) {\n\t\t\tz[ o[2] ] = fcn( v[ 0 ], v[ 1 ] );\n\t\t}\n\t\to[ 0 ] += strideX;\n\t\to[ 1 ] += strideY;\n\t\to[ 2 ] += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default mapBy2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a binary function to each pair of elements retrieved from strided input arrays according to a callback function and assign results to a strided output array.\n*\n* @module @stdlib/strided-base-map-by2\n*\n* @example\n* import add from '@stdlib/math-base-ops-add';\n* import mapBy2 from '@stdlib/strided-base-map-by2';\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, y, 1, z, 1, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*\n* @example\n* import add from '@stdlib/math-base-ops-add';\n* import mapBy2 from '@stdlib/strided-base-map-by2';\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2.ndarray( x.length, x, 1, 0, y, 1, 0, z, 1, 0, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["getter","x","idx","get","setter","value","set","mapBy2","N","strideX","y","strideY","z","strideZ","fcn","clbk","thisArg","xget","yget","zset","getAccessor","setAccessor","args","o","a","v","i","call","accessors","getIndexed","setIndexed","strided","offsetX","offsetY","offsetZ","setReadOnly","main","ndarray"],"mappings":"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"}