{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/ndarray.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* import add from '@stdlib/math-base-ops-add';\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, y, 1, z, 1, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, y, strideY, z, strideZ, fcn, clbk, thisArg ) {\n\tvar args;\n\tvar o;\n\tvar a;\n\tvar v;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\to = [ 0, 0, 0 ];\n\tif ( strideX < 0 ) {\n\t\to[ 0 ] = (1-N) * strideX;\n\t} else {\n\t\to[ 0 ] = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\to[ 1 ] = (1-N) * strideY;\n\t} else {\n\t\to[ 1 ] = 0;\n\t}\n\tif ( strideZ < 0 ) {\n\t\to[ 2 ] = (1-N) * strideZ;\n\t} else {\n\t\to[ 2 ] = 0;\n\t}\n\ta = [ x, y, z ];\n\targs = [ 0, 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\targs[ 0 ] = x[ o[0] ];\n\t\targs[ 1 ] = y[ o[1] ];\n\t\tv = clbk.call( thisArg, args, i, o, a );\n\t\tif ( v !== void 0 ) {\n\t\t\tz[ o[2] ] = fcn( v[ 0 ], v[ 1 ] );\n\t\t}\n\t\to[ 0 ] += strideX;\n\t\to[ 1 ] += strideY;\n\t\to[ 2 ] += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default mapBy2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* import add from '@stdlib/math-base-ops-add';\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, 0, y, 1, 0, z, 1, 0, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, offsetX, y, strideY, offsetY, z, strideZ, offsetZ, fcn, clbk, thisArg ) { // eslint-disable-line max-len, max-params\n\tvar args;\n\tvar o;\n\tvar a;\n\tvar v;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\to = [ offsetX, offsetY, offsetZ ];\n\ta = [ x, y, z ];\n\targs = [ 0, 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\targs[ 0 ] = x[ o[0] ];\n\t\targs[ 1 ] = y[ o[1] ];\n\t\tv = clbk.call( thisArg, args, i, o, a );\n\t\tif ( v !== void 0 ) {\n\t\t\tz[ o[2] ] = fcn( v[ 0 ], v[ 1 ] );\n\t\t}\n\t\to[ 0 ] += strideX;\n\t\to[ 1 ] += strideY;\n\t\to[ 2 ] += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default mapBy2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a binary function to each pair of elements retrieved from strided input arrays according to a callback function and assign results to a strided output array.\n*\n* @module @stdlib/strided-base-map-by2\n*\n* @example\n* import add from '@stdlib/math-base-ops-add';\n* import mapBy2 from '@stdlib/strided-base-map-by2';\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, y, 1, z, 1, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*\n* @example\n* import add from '@stdlib/math-base-ops-add';\n* import mapBy2 from '@stdlib/strided-base-map-by2';\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2.ndarray( x.length, x, 1, 0, y, 1, 0, z, 1, 0, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["mapBy2","N","x","strideX","y","strideY","z","strideZ","fcn","clbk","thisArg","args","o","a","v","i","call","offsetX","offsetY","offsetZ","setReadOnly","main","ndarray"],"mappings":";;iHAuDA,SAASA,EAAQC,EAAGC,EAAGC,EAASC,EAAGC,EAASC,EAAGC,EAASC,EAAKC,EAAMC,GAClE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAKd,GAAK,EACT,OAAOK,EAoBR,KAlBAM,EAAI,CAAE,EAAG,EAAG,IAER,GADCT,EAAU,GACJ,EAAEF,GAAKE,EAER,EAGTS,EAAG,GADCP,EAAU,GACJ,EAAEJ,GAAKI,EAER,EAGTO,EAAG,GADCL,EAAU,GACJ,EAAEN,GAAKM,EAER,EAEVM,EAAI,CAAEX,EAAGE,EAAGE,GACZK,EAAO,CAAE,EAAG,GACNI,EAAI,EAAGA,EAAId,EAAGc,IACnBJ,EAAM,GAAMT,EAAGU,EAAE,IACjBD,EAAM,GAAMP,EAAGQ,EAAE,SAEN,KADXE,EAAIL,EAAKO,KAAMN,EAASC,EAAMI,EAAGH,EAAGC,MAEnCP,EAAGM,EAAE,IAAOJ,EAAKM,EAAG,GAAKA,EAAG,KAE7BF,EAAG,IAAOT,EACVS,EAAG,IAAOP,EACVO,EAAG,IAAOL,EAEX,OAAOD,CACR,CCpCA,SAASN,EAAQC,EAAGC,EAAGC,EAASc,EAASb,EAAGC,EAASa,EAASZ,EAAGC,EAASY,EAASX,EAAKC,EAAMC,GAC7F,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAKd,GAAK,EACT,OAAOK,EAKR,IAHAM,EAAI,CAAEK,EAASC,EAASC,GACxBN,EAAI,CAAEX,EAAGE,EAAGE,GACZK,EAAO,CAAE,EAAG,GACNI,EAAI,EAAGA,EAAId,EAAGc,IACnBJ,EAAM,GAAMT,EAAGU,EAAE,IACjBD,EAAM,GAAMP,EAAGQ,EAAE,SAEN,KADXE,EAAIL,EAAKO,KAAMN,EAASC,EAAMI,EAAGH,EAAGC,MAEnCP,EAAGM,EAAE,IAAOJ,EAAKM,EAAG,GAAKA,EAAG,KAE7BF,EAAG,IAAOT,EACVS,EAAG,IAAOP,EACVO,EAAG,IAAOL,EAEX,OAAOD,CACR,CCTAc,EAAAC,EAAA,UAAAC"}