{
  "version": 3,
  "sources": ["../lib/map.ndarray.js", "../lib/map.js", "../lib/accessors.ndarray.js", "../lib/accessors.js", "../lib/main.js", "../lib/ndarray.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* var add = require( '@stdlib/number-float64-base-add' );\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, 0, y, 1, 0, z, 1, 0, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, offsetX, y, strideY, offsetY, z, strideZ, offsetZ, fcn, clbk, thisArg ) { // eslint-disable-line max-len, max-params\n\tvar args;\n\tvar o;\n\tvar a;\n\tvar v;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\to = [ offsetX, offsetY, offsetZ ];\n\ta = [ x, y, z ];\n\targs = [ 0, 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\targs[ 0 ] = x[ o[0] ];\n\t\targs[ 1 ] = y[ o[1] ];\n\t\tv = clbk.call( thisArg, args, i, o, a );\n\t\tif ( v !== void 0 ) {\n\t\t\tz[ o[2] ] = fcn( v[ 0 ], v[ 1 ] );\n\t\t}\n\t\to[ 0 ] += strideX;\n\t\to[ 1 ] += strideY;\n\t\to[ 2 ] += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mapBy2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './map.ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* var add = require( '@stdlib/number-float64-base-add' );\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, y, 1, z, 1, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, y, strideY, z, strideZ, fcn, clbk, thisArg ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ), z, strideZ, stride2offset( N, strideZ ), fcn, clbk, thisArg ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = mapBy2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Function} xget - accessor for retrieving elements in `x`\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Function} yget - accessor for retrieving elements in `y`\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} zset - accessor for setting elements in `z`\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* var add = require( '@stdlib/number-float64-base-add' );\n*\n* function accessor( values ) {\n*     return values;\n* }\n*\n* function get( buf, idx ) {\n*     return buf[ idx ] * 2.0;\n* }\n*\n* function set( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, 0, get, y, 1, 0, get, z, 1, 0, set, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, offsetX, xget, y, strideY, offsetY, yget, z, strideZ, offsetZ, zset, fcn, clbk, thisArg ) { // eslint-disable-line max-len, max-params\n\tvar args;\n\tvar o;\n\tvar a;\n\tvar v;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\to = [ offsetX, offsetY, offsetZ ];\n\ta = [ x, y, z ];\n\targs = [ 0, 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\targs[ 0 ] = xget( x, o[ 0 ] );\n\t\targs[ 1 ] = yget( y, o[ 1 ] );\n\t\tv = clbk.call( thisArg, args, i, o, a );\n\t\tif ( v !== void 0 ) {\n\t\t\tzset( z, o[ 2 ], fcn( v[ 0 ], v[ 1 ] ) );\n\t\t}\n\t\to[ 0 ] += strideX;\n\t\to[ 1 ] += strideY;\n\t\to[ 2 ] += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mapBy2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './accessors.ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {Function} xget - accessor for retrieving elements in `x`\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {Function} yget - accessor for retrieving elements in `y`\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {Function} zset - accessor for setting elements in `z`\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* var add = require( '@stdlib/number-float64-base-add' );\n*\n* function accessor( values ) {\n*     return values;\n* }\n*\n* function get( buf, idx ) {\n*     return buf[ idx ] * 2.0;\n* }\n*\n* function set( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, get, y, 1, get, z, 1, set, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, xget, y, strideY, yget, z, strideZ, zset, fcn, clbk, thisArg ) { // eslint-disable-line max-len, max-params\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), xget, y, strideY, stride2offset( N, strideY ), yget, z, strideZ, stride2offset( N, strideZ ), zset, fcn, clbk, thisArg ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = mapBy2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar accessorGetter = require( '@stdlib/array-base-accessor-getter' );\nvar accessorSetter = require( '@stdlib/array-base-accessor-setter' );\nvar getter = require( '@stdlib/array-base-getter' );\nvar setter = require( '@stdlib/array-base-setter' );\nvar dtype = require( '@stdlib/array-dtype' );\nvar strided = require( './map.js' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* var add = require( '@stdlib/number-float64-base-add' );\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, y, 1, z, 1, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, y, strideY, z, strideZ, fcn, clbk, thisArg ) {\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\n\tif ( isAccessorArray( x ) ) {\n\t\txget = accessorGetter( dtype( x ) );\n\t}\n\tif ( isAccessorArray( y ) ) {\n\t\tyget = accessorGetter( dtype( y ) );\n\t}\n\tif ( isAccessorArray( z ) ) {\n\t\tzset = accessorSetter( dtype( z ) );\n\t}\n\tif ( xget || yget || zset ) {\n\t\txget = xget || getter( dtype( x ) );\n\t\tyget = yget || getter( dtype( y ) );\n\t\tzset = zset || setter( dtype( z ) );\n\t\treturn accessors( N, x, strideX, xget, y, strideY, yget, z, strideZ, zset, fcn, clbk, thisArg ); // eslint-disable-line max-len\n\t}\n\treturn strided( N, x, strideX, y, strideY, z, strideZ, fcn, clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nmodule.exports = mapBy2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar accessorGetter = require( '@stdlib/array-base-accessor-getter' );\nvar accessorSetter = require( '@stdlib/array-base-accessor-setter' );\nvar getter = require( '@stdlib/array-base-getter' );\nvar setter = require( '@stdlib/array-base-setter' );\nvar dtype = require( '@stdlib/array-dtype' );\nvar strided = require( './map.ndarray.js' );\nvar accessors = require( './accessors.ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* var add = require( '@stdlib/number-float64-base-add' );\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, 0, y, 1, 0, z, 1, 0, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, offsetX, y, strideY, offsetY, z, strideZ, offsetZ, fcn, clbk, thisArg ) { // eslint-disable-line max-len, max-params\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\n\tif ( isAccessorArray( x ) ) {\n\t\txget = accessorGetter( dtype( x ) );\n\t}\n\tif ( isAccessorArray( y ) ) {\n\t\tyget = accessorGetter( dtype( y ) );\n\t}\n\tif ( isAccessorArray( z ) ) {\n\t\tzset = accessorSetter( dtype( z ) );\n\t}\n\tif ( xget || yget || zset ) {\n\t\txget = xget || getter( dtype( x ) );\n\t\tyget = yget || getter( dtype( y ) );\n\t\tzset = zset || setter( dtype( z ) );\n\t\treturn accessors( N, x, strideX, offsetX, xget, y, strideY, offsetY, yget, z, strideZ, offsetZ, zset, fcn, clbk, thisArg ); // eslint-disable-line max-len\n\t}\n\treturn strided( N, x, strideX, offsetX, y, strideY, offsetY, z, strideZ, offsetZ, fcn, clbk, thisArg ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = mapBy2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a binary function to each pair of elements retrieved from strided input arrays according to a callback function and assign results to a strided output array.\n*\n* @module @stdlib/strided-base-map-by2\n*\n* @example\n* var add = require( '@stdlib/number-float64-base-add' );\n* var mapBy2 = require( '@stdlib/strided-base-map-by2' );\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, y, 1, z, 1, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*\n* @example\n* var add = require( '@stdlib/number-float64-base-add' );\n* var mapBy2 = require( '@stdlib/strided-base-map-by2' );\n*\n* function accessor( values ) {\n*     values[ 0 ] *= 2.0;\n*     values[ 1 ] *= 2.0;\n*     return values;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2.ndarray( x.length, x, 1, 0, y, 1, 0, z, 1, 0, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_map_ndarray", "__commonJSMin", "exports", "module", "mapBy2", "N", "x", "strideX", "offsetX", "y", "strideY", "offsetY", "z", "strideZ", "offsetZ", "fcn", "clbk", "thisArg", "args", "o", "a", "v", "i", "require_map", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "mapBy2", "N", "x", "strideX", "y", "strideY", "z", "strideZ", "fcn", "clbk", "thisArg", "require_accessors_ndarray", "__commonJSMin", "exports", "module", "mapBy2", "N", "x", "strideX", "offsetX", "xget", "y", "strideY", "offsetY", "yget", "z", "strideZ", "offsetZ", "zset", "fcn", "clbk", "thisArg", "args", "o", "a", "v", "i", "require_accessors", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "mapBy2", "N", "x", "strideX", "xget", "y", "strideY", "yget", "z", "strideZ", "zset", "fcn", "clbk", "thisArg", "require_main", "__commonJSMin", "exports", "module", "isAccessorArray", "accessorGetter", "accessorSetter", "getter", "setter", "dtype", "strided", "accessors", "mapBy2", "N", "x", "strideX", "y", "strideY", "z", "strideZ", "fcn", "clbk", "thisArg", "xget", "yget", "zset", "require_ndarray", "__commonJSMin", "exports", "module", "isAccessorArray", "accessorGetter", "accessorSetter", "getter", "setter", "dtype", "strided", "accessors", "mapBy2", "N", "x", "strideX", "offsetX", "y", "strideY", "offsetY", "z", "strideZ", "offsetZ", "fcn", "clbk", "thisArg", "xget", "yget", "zset", "setReadOnly", "main", "ndarray"]
}
